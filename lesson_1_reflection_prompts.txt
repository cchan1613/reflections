How did viewing a diff between two versions of a file help you see the bug that
was introduced?

  It shows the difference between the old and new files, and changes between the files.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

  Git helps users to quickly identify what feature(s) had been added for 
  ease of trouble shooting problems.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

  Automatic save option can overwhelm the history if we take weeks to 
  implement a completed feature.

  When we can decide what is too small, just right, or too big for updates in a logical change,
  we can then make a single commit for all the modifications at once.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

  For programmers, it is easier to break down re-useable code segments into modules
  and placing them in separate library files. Once these re-usable code segments
  are debugged, it can then be shared by many other programmers. It also makes
  adding and undoing feature much easy if it can be traced as a single commit. 

  Since google docs support many users on a single file simultaneously, it
  promotes exchanges of ideas, makes instant resources sharing and and conferencing easier.

How can you use the commands git log and git diff to view the history of files?

  'git log' displays the commit history consisting of commit entries. Each entry contains 
  a set of attributes like ID, author name, date of commit and the a short text describing
  the purpose of the commit.

  'gif diff' is used to compare two commits, or two branch IDs. The output of the diff
  is displayed using colored code text. The green entry prefixed by a plus (+) shows
  the newly added code, and the red entry prefixed by a minus (-) shows the newly 
  removed code from he old files. The output also contains 1) file names where difference
  was found, 2) the line section of the each segment where difference
  was found.


How might using version control make you more confident to make changes that
could break something?

  
  Because changes are logged in the history of the repository, version
  control simplifies trouble shooting, fixing bugs and adding new features.


Now that you have your workspace set up, what do you want to try using Git for?

  Version control forces me to re-consider what is a single logical change,
  and I will use it for better organzing my time and effort in tracking errors, 
  identifying right places for enhancement, working in parallel with other new
  features in separate branches, and breaking code down into manageable components.
