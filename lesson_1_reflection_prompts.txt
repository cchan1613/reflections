How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    it show the difference between the old and new files, and the content
    changes between the files.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    it is like a having a big undo function for the project.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

  manual copy
  google doc, history, all changes save in docs
  dropbox right click view previous version, save for 30 days
  wikipedia - history tab for old versions

  for undoing individual updates in a file.


  too small, just right, too big

  updates in a single commit should be related, not two bug fix
  very hours, just right for a logic feature
  commit onces for a complete feature in a week is way to big to 
   see and understand the changes.



Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    git has a structure that supports multiple files call a repository, when commit other files in the repository will be included in the command even through there is no changes made in them. If there is change, then it will be easy seen by comparing the commit using the commit ID and diff commit ID.

    git allows undoing of functionality, while google Doc shows no relationship bewteen files.

How can you use the commands git log and git diff to view the history of files?

git log shows the commit history, each entry contains ID,  author name, date of commit and a small paragraph of the comments of each comment

gif diff allows us to compare between two commit entry using two commit IDs, 
the green entry preset with a plus (+) show the newly added code, and the red entry preset with a minus (1) shows the newly removed code between the old and new commit entries. The output of the command shows what files were involved.



How might using version control make you more confident to make changes that
could break something?

    git checkout with the first four digit of the commit ID can help revert back to the previous working verison to trace for the problem, if all are good, the checkout command can be used to get back to the HEAD position.


Now that you have your workspace set up, what do you want to try using Git for?

    I no longer have to make small incremental changes to my source code, I can rely on version-control
    git checkout to experiment with big logical feature changes, afterall if the new feature aren't as 
    good, I can have quickily revert back to the HEAD of the branch
